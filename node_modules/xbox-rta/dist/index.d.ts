import { Authflow } from 'prismarine-auth';
import { TypedEmitter } from 'tiny-typed-emitter';
export interface SubscribeResponse {
    type: number;
    sequenceId: number;
    status: number;
    subscriptionId: string;
    data: unknown;
    uri: string | null;
}
export interface UnsubscribeResponse {
    type: number;
    sequenceId: number;
    status: number;
}
export interface EventResponse {
    type: number;
    subscriptionId: string;
    data: unknown;
}
interface RTAEvents {
    event: (event: EventResponse) => void;
    subscribe: (event: SubscribeResponse) => void;
    unsubscribe: (event: UnsubscribeResponse) => void;
    error: (error: Error) => void;
}
export declare class XboxRTA extends TypedEmitter<RTAEvents> {
    subscriptions: Map<number, SubscribeResponse>;
    private ws;
    private queue;
    private authflow;
    private authorization;
    private heartbeatTimeout;
    private reconnectTimeout;
    private sequenceId;
    constructor(authflow: Authflow);
    connect(): Promise<void>;
    destroy(resume?: boolean): Promise<void>;
    subscribe(uri: string): Promise<SubscribeResponse>;
    unsubscribe(subscriptionId: string): Promise<UnsubscribeResponse>;
    private send;
    private init;
    private onOpen;
    private onError;
    private onClose;
    private onMessage;
    private heartbeat;
}
export {};
