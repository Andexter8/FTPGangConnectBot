import { AxiosRequestConfig } from 'axios';
import { Authflow } from 'prismarine-auth';
import { RESTXblmessageInboxResponse } from './types/xblmessaging';
import { SessionRequest, RESTSessionResponse, SessionHandlePayload } from './types/sessiondirectory';
import { RESTSocialPostBulkFriendRequestResponse } from './types/social';
type RequestHeaders = {
    [x: string]: string | boolean | number | undefined;
};
type MethodRequestConfig = {
    relyingParty?: string;
    contractVersion?: string;
    params?: AxiosRequestConfig['params'];
    data?: AxiosRequestConfig['data'];
    headers?: RequestHeaders;
};
type RequestConfig = MethodRequestConfig & {
    url: string;
};
export default class Rest {
    auth: Authflow;
    options: {
        headers?: RequestHeaders;
    };
    constructor(authflow: Authflow, options?: {});
    get(url: string, config?: MethodRequestConfig): Promise<any>;
    post(url: string, config?: MethodRequestConfig): Promise<any>;
    put(url: string, config?: MethodRequestConfig): Promise<any>;
    delete(url: string, config?: MethodRequestConfig): Promise<any>;
    _request(method: 'GET' | 'POST' | 'PUT' | 'DELETE', config: RequestConfig): Promise<any>;
    sendHandle(payload: SessionHandlePayload): Promise<any>;
    setActivity(sessionName: string): Promise<any>;
    sendInvite(sessionName: string, xuid: string): Promise<any>;
    getSession(sessionName: string): Promise<RESTSessionResponse>;
    updateSession(sessionName: string, payload: SessionRequest): Promise<RESTSessionResponse>;
    updateMemberCount(sessionName: string, count: number, maxCount?: number): Promise<void>;
    addConnection(sessionName: string, xuid: string, connectionId: string, subscriptionId: string): Promise<void>;
    updateConnection(sessionName: string, connectionId: string): Promise<void>;
    leaveSession(sessionName: string): Promise<void>;
    getProfile(input: string): Promise<import("./types/peoplehub").Person>;
    getProfiles(xuids: string[]): Promise<import("./types/peoplehub").Person[]>;
    getXboxFriends(): Promise<import("./types/peoplehub").Person[]>;
    getXboxFollowers(): Promise<import("./types/peoplehub").Person[]>;
    getFriendRequestsReceived(): Promise<import("./types/peoplehub").FriendRequestPerson[]>;
    acceptFriendRequests(xuids: string[]): Promise<RESTSocialPostBulkFriendRequestResponse>;
    declineFriendRequests(xuids: string[]): Promise<RESTSocialPostBulkFriendRequestResponse>;
    addXboxFriend(xuid: string): Promise<void>;
    removeXboxFriend(xuid: string): Promise<void>;
    getInboxMessages(inbox: 'primary' | 'secondary'): Promise<RESTXblmessageInboxResponse>;
}
export {};
