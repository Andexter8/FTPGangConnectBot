"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const json_bigint_1 = require("json-bigint");
const constants_1 = require("./common/constants");
const util_1 = require("./common/util");
class Rest {
    auth;
    options;
    constructor(authflow, options = {}) {
        this.auth = authflow;
        this.options = options;
    }
    async get(url, config = {}) {
        return await this._request('GET', { url, ...config });
    }
    async post(url, config = {}) {
        return await this._request('POST', { url, ...config });
    }
    async put(url, config = {}) {
        return await this._request('PUT', { url, ...config });
    }
    async delete(url, config = {}) {
        return await this._request('DELETE', { url, ...config });
    }
    async _request(method, config) {
        const auth = await this.auth.getXboxToken('http://xboxlive.com');
        const payload = {
            method,
            url: config.url,
            headers: {
                'authorization': `XBL3.0 x=${auth.userHash};${auth.XSTSToken}`,
                'accept-language': 'en-US',
                ...config.headers,
            },
            data: undefined,
            params: undefined,
        };
        if (config.contractVersion)
            payload.headers['x-xbl-contract-version'] = config.contractVersion;
        if (config.params)
            payload.params = config.params;
        if (config.data)
            payload.data = config.data;
        return (0, axios_1.default)({
            ...payload,
            transformResponse: [data => data ? (0, json_bigint_1.parse)(data) : undefined],
            transformRequest: [data => data ? (0, json_bigint_1.stringify)(data) : undefined],
        }).then(e => e.data);
    }
    async sendHandle(payload) {
        return this.post('https://sessiondirectory.xboxlive.com/handles', {
            data: payload,
            contractVersion: '107',
        });
    }
    async setActivity(sessionName) {
        return this.sendHandle({
            version: 1,
            type: 'activity',
            sessionRef: { scid: constants_1.SessionConfig.MinecraftSCID, templateName: constants_1.SessionConfig.MinecraftTemplateName, name: sessionName },
        });
    }
    async sendInvite(sessionName, xuid) {
        return this.sendHandle({
            version: 1,
            type: 'invite',
            sessionRef: { scid: constants_1.SessionConfig.MinecraftSCID, templateName: constants_1.SessionConfig.MinecraftTemplateName, name: sessionName },
            invitedXuid: xuid,
            inviteAttributes: { titleId: constants_1.SessionConfig.MinecraftTitleID },
        });
    }
    async getSession(sessionName) {
        const response = await this.get(`https://sessiondirectory.xboxlive.com/serviceconfigs/${constants_1.SessionConfig.MinecraftSCID}/sessionTemplates/${constants_1.SessionConfig.MinecraftTemplateName}/sessions/${sessionName}`, {
            contractVersion: '107',
        });
        return response;
    }
    async updateSession(sessionName, payload) {
        const response = await this.put(`https://sessiondirectory.xboxlive.com/serviceconfigs/${constants_1.SessionConfig.MinecraftSCID}/sessionTemplates/${constants_1.SessionConfig.MinecraftTemplateName}/sessions/${sessionName}`, {
            data: payload,
            contractVersion: '107',
        });
        return response;
    }
    async updateMemberCount(sessionName, count, maxCount) {
        const payload = maxCount ? { MemberCount: count, MaxMemberCount: maxCount } : { MemberCount: count };
        await this.updateSession(sessionName, { properties: { custom: payload } });
    }
    async addConnection(sessionName, xuid, connectionId, subscriptionId) {
        const payload = {
            members: {
                me: {
                    constants: { system: { xuid, initialize: true } },
                    properties: {
                        system: { active: true, connection: connectionId, subscription: { id: subscriptionId, changeTypes: ['everything'] } },
                    },
                },
            },
        };
        await this.updateSession(sessionName, payload);
    }
    async updateConnection(sessionName, connectionId) {
        const payload = {
            members: { me: { properties: { system: { active: true, connection: connectionId } } } },
        };
        await this.updateSession(sessionName, payload);
    }
    async leaveSession(sessionName) {
        await this.updateSession(sessionName, { members: { me: null } });
    }
    async getProfile(input) {
        let xuid = input;
        if (!(0, util_1.isXuid)(input)) {
            const target = input === 'me' ? 'me' : `gt(${encodeURIComponent(input)})`;
            const response = await this.get(`https://profile.xboxlive.com/users/${target}/settings`, { contractVersion: '2' });
            xuid = response.profileUsers[0].id;
        }
        const response = await this.get(`https://peoplehub.xboxlive.com/users/me/people/xuids(${xuid})/decoration/detail,preferredcolor`, { contractVersion: '5' });
        return response.people.shift();
    }
    async getProfiles(xuids) {
        const response = await this.post('https://peoplehub.xboxlive.com/users/me/people/batch/decoration/detail,preferredcolor', { data: { xuids }, contractVersion: '5' });
        return response.people;
    }
    async getXboxFriends() {
        const response = await this.get('https://peoplehub.xboxlive.com/users/me/people/social/decoration/detail,preferredColor,follower', { contractVersion: '5' });
        return response.people;
    }
    async getXboxFollowers() {
        const response = await this.get('https://peoplehub.xboxlive.com/users/me/people/followers/decoration/detail,preferredColor,follower', { contractVersion: '5' });
        return response.people;
    }
    async getFriendRequestsReceived() {
        const response = await this.get('https://peoplehub.xboxlive.com/users/me/people/friendrequests(received)/decoration/detail,preferredColor,follower', { contractVersion: '7' });
        return response.people;
    }
    async acceptFriendRequests(xuids) {
        const response = await this.post('https://social.xboxlive.com/bulk/users/me/people/friends/v2?method=add', { data: { xuids }, contractVersion: '3' });
        return response;
    }
    async declineFriendRequests(xuids) {
        const response = await this.post('https://social.xboxlive.com/bulk/users/me/people/friends/v2?method=remove', { data: { xuids }, contractVersion: '3' });
        return response;
    }
    async addXboxFriend(xuid) {
        await this.put(`https://social.xboxlive.com/users/me/people/xuid(${xuid})`, { contractVersion: '2' });
    }
    async removeXboxFriend(xuid) {
        await this.delete(`https://social.xboxlive.com/users/me/people/xuid(${xuid})`, { contractVersion: '2' });
    }
    async getInboxMessages(inbox) {
        const response = await this.get(`https://xblmessaging.xboxlive.com/network/xbox/users/me/inbox/${inbox}`, { contractVersion: '1' });
        return response;
    }
}
exports.default = Rest;
