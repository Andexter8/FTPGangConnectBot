"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Module_1 = __importDefault(require("../classes/Module"));
const start_game_1 = require("../common/start_game");
class ServerFromList extends Module_1.default {
    n;
    options;
    constructor(portal) {
        super(portal, 'serverFromList', 'Allows players to join the server from a list of servers');
        this.options = {
            form: {
                title: '§l§aServer Form List',
                content: '§7Please select a server to join',
                buttons: [
                    { text: '§8Anarchy Server\n§7Click Here§!', ip: 'bedrock.opblocks.com', port: 19132 },
                    { text: '§7Creative Server\n§7Click Here§', ip: 'bedrock.opblocks.com', port: 19132 },
                    { text: '§6Survival Server\n§7Click Here§!', ip: 'bedrock.opblocks.com', port: 19132 },
                ],
            },
            timeout: 60000,
            timeoutMessage: '§cYou took too long to respond',
        };
        this.n = 0;
    }
    async run() {
        this.portal.onServerConnection = (client) => {
            client.once('join', () => this.handleJoin(client));
            client.on('spawn', () => {
                this.sendForm(client);
            });
            setTimeout(() => {
                client.disconnect(this.options.timeoutMessage);
            }, this.options.timeout);
        };
    }
    sendForm(client) {
        client.write('modal_form_request', {
            form_id: this.n++,
            data: JSON.stringify({
                type: 'form',
                title: this.options.form.title,
                content: this.options.form.content,
                buttons: this.options.form.buttons.map((button) => ({ text: button.text })),
            }),
        });
    }
    handleJoin(client) {
        client.write('resource_packs_info', {
            must_accept: false,
            has_scripts: false,
            behaviour_packs: [],
            world_template: { uuid: '550e8400-e29b-41d4-a716-446655440000', version: '' },
            texture_packs: [],
            resource_pack_links: [],
        });
        client.write('resource_pack_stack', { must_accept: false, behavior_packs: [], resource_packs: [], game_version: '', experiments: [], experiments_previously_used: false });
        client.once('resource_pack_client_response', async () => {
            client.write('start_game', start_game_1.start_game);
            client.write('item_registry', { itemstates: [] });
            client.write('play_status', { status: 'player_spawn' });
        });
        client.on('modal_form_response', (p) => this.handleFormResponse(p, client));
    }
    handleFormResponse(response, client) {
        if (response.has_cancel_reason) {
            setTimeout(() => this.sendForm(client), 5000);
            return;
        }
        const server = this.options.form.buttons[parseInt(response.data)];
        client.write('transfer', { server_address: server.ip, port: server.port });
    }
}
exports.default = ServerFromList;
