"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const uuid_1 = require("uuid");
const xbox_rta_1 = require("xbox-rta");
const rest_1 = __importDefault(require("../rest"));
const debug = (0, debug_1.default)('bedrock-portal');
class Host {
    portal;
    authflow;
    rest;
    rta = null;
    profile = null;
    connectionId = null;
    subscriptionId = (0, uuid_1.v4)();
    constructor(portal, authflow) {
        this.portal = portal;
        this.authflow = authflow;
        this.rest = new rest_1.default(this.authflow);
    }
    async connect() {
        const auth = await this.authflow.getXboxToken();
        this.profile = await this.rest.getProfile(auth.userXUID);
        this.rta = new xbox_rta_1.XboxRTA(this.authflow);
        await this.rta.connect();
        const subResponse = await this.rta.subscribe('https://sessiondirectory.xboxlive.com/connections/');
        this.connectionId = subResponse.data.ConnectionId;
        this.rta.on('subscribe', (event) => this.onSubscribe(event));
    }
    async onSubscribe(event) {
        const connectionId = event.data?.ConnectionId;
        if (connectionId && typeof connectionId === 'string') {
            debug('Received RTA subscribe event', event);
            try {
                this.connectionId = connectionId;
                await this.rest.updateConnection(this.portal.session.name, connectionId);
                await this.rest.setActivity(this.portal.session.name);
            }
            catch (e) {
                debug('Failed to update connection, session may have been abandoned', e);
                await this.portal.end(true);
            }
        }
    }
}
exports.default = Host;
