"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modules = exports.Module = exports.Joinability = exports.BedrockPortal = void 0;
const debug_1 = __importDefault(require("debug"));
const uuid_1 = require("uuid");
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const bedrock_portal_nethernet_1 = require("bedrock-portal-nethernet");
const Host_1 = __importDefault(require("./classes/Host"));
const Module_1 = __importDefault(require("./classes/Module"));
exports.Module = Module_1.default;
const constants_1 = require("./common/constants");
const Event_1 = __importDefault(require("./handlers/Event"));
const autoFriendAdd_1 = __importDefault(require("./modules/autoFriendAdd"));
const inviteOnMessage_1 = __importDefault(require("./modules/inviteOnMessage"));
const redirectFromRealm_1 = __importDefault(require("./modules/redirectFromRealm"));
const multipleAccounts_1 = __importDefault(require("./modules/multipleAccounts"));
const autoFriendAccept_1 = __importDefault(require("./modules/autoFriendAccept"));
const updateMemberCount_1 = __importDefault(require("./modules/updateMemberCount"));
const serverFormList_1 = __importDefault(require("./modules/serverFormList"));
const start_game_1 = require("./common/start_game");
const util_1 = require("./common/util");
const debug = (0, debug_1.default)('bedrock-portal');
class BedrockPortal extends tiny_typed_emitter_1.TypedEmitter {
    authflow;
    host;
    options;
    session;
    players;
    modules = new Map();
    server = new bedrock_portal_nethernet_1.Server();
    constructor(authflow, options = {}) {
        super();
        this.options = {
            ip: 'bedrock.opblocks.com',
            port: 19132,
            joinability: constants_1.Joinability.FriendsOfFriends,
            webRTCNetworkId: (0, util_1.getRandomUint64)(),
            ...options,
            world: {
                hostName: 'Bedrock Portal v0.9.5',
                name: 'By LucienHH',
                version: '0.9.5',
                memberCount: 0,
                maxMemberCount: 10,
                ...options.world,
            },
        };
        this.validateOptions(this.options);
        this.authflow = authflow;
        this.host = new Host_1.default(this, this.authflow);
        this.session = { name: '' };
        this.players = new Map();
        this.modules = new Map();
    }
    validateOptions(options) {
        if (!Object.values(constants_1.Joinability).includes(options.joinability))
            throw new Error('Invalid joinability - Expected one of ' + Object.keys(constants_1.Joinability).join(', '));
    }
    /**
     * Starts the BedrockPortal instance.
     */
    async start() {
        this.players = new Map();
        await this.host.connect();
        this.session.name = (0, uuid_1.v4)();
        await this.server.listen(this.authflow, this.options.webRTCNetworkId);
        this.server.on('connect', (client) => this.onServerConnection(client));
        const session = await this.createAndPublishSession();
        this.host.rta.on('event', (event) => {
            (0, Event_1.default)(this, event)
                .catch(e => debug('Failed to handle event', e));
        });
        if (this.modules) {
            for (const mod of this.modules.values()) {
                mod.run(this)
                    .then(() => debug(`Module ${mod.name} has run`))
                    .catch(e => debug(`Module ${mod.name} failed to run`, e));
            }
        }
        this.emit('sessionCreated', session);
    }
    /**
     * Ends the BedrockPortal instance.
     */
    async end(resume = false) {
        if (this.host.rta) {
            await this.host.rta.destroy();
        }
        await this.host.rest.leaveSession(this.session.name)
            .catch(() => { debug('Failed to leave session as host'); });
        if (this.modules) {
            for (const mod of this.modules.values()) {
                debug(`Stopping module: ${mod.name}`);
                await mod.stop();
            }
        }
        debug(`Abandoned session, name: ${this.session.name} - Resume: ${resume}`);
        if (resume) {
            return this.start();
        }
    }
    /**
     * Returns the current members in the session.
     */
    getSessionMembers() {
        return this.players;
    }
    /**
     * Invites a player to the BedrockPortal instance.
     * @param identifyer The player's gamertag or XUID.
     */
    async invitePlayer(identifier) {
        debug(`Inviting player, identifier: ${identifier}`);
        if (!(0, util_1.isXuid)(identifier)) {
            const profile = await this.host.rest.getProfile(identifier)
                .catch(() => { throw new Error(`Failed to get profile for identifier: ${identifier}`); });
            identifier = profile.xuid;
        }
        await this.host.rest.sendInvite(this.session.name, identifier);
        debug(`Invited player, xuid: ${identifier}`);
    }
    /**
     * Updates the current member count which is displayed in the Minecraft client.
     * @param count The new member count.
     * @param maxCount The new max member count.
     */
    async updateMemberCount(count, maxCount) {
        await this.host.rest.updateMemberCount(this.session.name, count, maxCount);
    }
    /**
     * Gets the current session of the BedrockPortal instance.
     */
    async getSession() {
        return await this.host.rest.getSession(this.session.name);
    }
    /**
     * Updates the current session of the BedrockPortal instance with the specified payload.
     * @param payload The payload to update the session with.
     */
    async updateSession(payload) {
        await this.host.rest.updateSession(this.session.name, payload);
    }
    /**
     * Enables a module for the BedrockPortal instance.
     * @see [Modules](https://github.com/LucienHH/bedrock-portal#modules) for a list of available modules or to create your own.
     * @example
     * portal.use(Modules.autoFriendAdd)
     * @example
     * portal.use(Modules.autoFriendAdd, {
     *   inviteOnAdd: true
     * })
     */
    use(mod, options) {
        const constructed = new mod(this);
        debug(`Enabled module: ${constructed.name}`);
        if (!(constructed instanceof Module_1.default))
            throw new Error('Module must extend the base module');
        if (this.modules.has(constructed.name))
            throw new Error(`Module with name ${constructed.name} has already been loaded`);
        constructed.applyOptions(options);
        this.modules.set(constructed.name, constructed);
    }
    onServerConnection = (client) => {
        client.on('join', () => {
            client.write('resource_packs_info', {
                must_accept: false,
                has_scripts: false,
                behaviour_packs: [],
                world_template: { uuid: '550e8400-e29b-41d4-a716-446655440000', version: '' },
                texture_packs: [],
                resource_pack_links: [],
            });
            client.write('resource_pack_stack', { must_accept: false, behavior_packs: [], resource_packs: [], game_version: '', experiments: [], experiments_previously_used: false });
            client.once('resource_pack_client_response', () => {
                client.write('start_game', start_game_1.start_game);
                client.once('set_player_game_type', () => {
                    client.write('transfer', { server_address: this.options.ip, port: this.options.port });
                });
            });
        });
    };
    async createAndPublishSession() {
        await this.updateSession(this.createSessionBody());
        debug(`Created session, name: ${this.session.name}, ID: ${this.options.webRTCNetworkId}`);
        await this.host.rest.setActivity(this.session.name);
        const session = await this.getSession();
        await this.updateSession({ properties: session.properties });
        debug(`Published session, name: ${this.session.name}, ID: ${this.options.webRTCNetworkId}`);
        return session;
    }
    createSessionBody() {
        if (!this.host.profile || !this.host.connectionId)
            throw new Error('No session owner');
        const joinability = constants_1.JoinabilityConfig[this.options.joinability];
        return {
            properties: {
                system: {
                    joinRestriction: joinability.joinRestriction,
                    readRestriction: 'followed',
                    closed: false,
                },
                custom: {
                    hostName: String(this.options.world.hostName),
                    worldName: String(this.options.world.name),
                    version: String(this.options.world.version),
                    MemberCount: Number(this.options.world.memberCount),
                    MaxMemberCount: Number(this.options.world.maxMemberCount),
                    Joinability: joinability.joinability,
                    ownerId: this.host.profile.xuid,
                    rakNetGUID: '',
                    worldType: 'Survival',
                    protocol: constants_1.SessionConfig.MiencraftProtocolVersion,
                    BroadcastSetting: joinability.broadcastSetting,
                    OnlineCrossPlatformGame: true,
                    CrossPlayDisabled: false,
                    TitleId: 0,
                    TransportLayer: 2,
                    LanGame: true,
                    WebRTCNetworkId: this.options.webRTCNetworkId,
                    SupportedConnections: [
                        {
                            ConnectionType: 3,
                            HostIpAddress: '',
                            HostPort: 0,
                            WebRTCNetworkId: this.options.webRTCNetworkId,
                            NetherNetId: this.options.webRTCNetworkId,
                        },
                    ],
                },
            },
            members: {
                me: {
                    constants: {
                        system: {
                            xuid: this.host.profile.xuid,
                            initialize: true,
                        },
                    },
                    properties: {
                        system: {
                            active: true,
                            connection: this.host.connectionId,
                            subscription: {
                                id: this.host.subscriptionId,
                                changeTypes: ['everything'],
                            },
                        },
                    },
                },
            },
        };
    }
}
exports.BedrockPortal = BedrockPortal;
// Export joinability
var constants_2 = require("./common/constants");
Object.defineProperty(exports, "Joinability", { enumerable: true, get: function () { return constants_2.Joinability; } });
const Modules = {
    AutoFriendAdd: autoFriendAdd_1.default,
    InviteOnMessage: inviteOnMessage_1.default,
    RedirectFromRealm: redirectFromRealm_1.default,
    MultipleAccounts: multipleAccounts_1.default,
    AutoFriendAccept: autoFriendAccept_1.default,
    UpdateMemberCount: updateMemberCount_1.default,
    ServerFromList: serverFormList_1.default,
};
exports.Modules = Modules;
