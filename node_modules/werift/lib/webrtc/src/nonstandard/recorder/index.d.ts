import Event from "rx.mini";
import type { MediaStreamTrack } from "../../media/track";
import type { MediaWriter, StreamEvent } from "./writer";
export declare class MediaRecorder {
    props: Partial<MediaRecorderOptions> & ({
        numOfTracks: number;
        tracks?: MediaStreamTrack[];
    } | {
        numOfTracks?: number;
        tracks: MediaStreamTrack[];
    }) & ({
        path: string;
        stream?: StreamEvent;
    } | {
        path?: string;
        stream: StreamEvent;
    });
    writer: MediaWriter;
    ext?: string;
    tracks: MediaStreamTrack[];
    started: boolean;
    onError: Event<[Error]>;
    constructor(props: Partial<MediaRecorderOptions> & ({
        numOfTracks: number;
        tracks?: MediaStreamTrack[];
    } | {
        numOfTracks?: number;
        tracks: MediaStreamTrack[];
    }) & ({
        path: string;
        stream?: StreamEvent;
    } | {
        path?: string;
        stream: StreamEvent;
    }));
    addTrack(track: MediaStreamTrack): Promise<void>;
    private start;
    stop(): Promise<void>;
}
export interface MediaRecorderOptions {
    width: number;
    height: number;
    jitterBufferLatency: number;
    jitterBufferSize: number;
    disableLipSync: boolean;
    waitForKeyframe: boolean;
    defaultDuration: number;
    tracks: MediaStreamTrack[];
    disableNtp: boolean;
}
