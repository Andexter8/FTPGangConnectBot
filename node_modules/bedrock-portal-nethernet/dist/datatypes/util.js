"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDebug = void 0;
exports.getFiles = getFiles;
exports.sleep = sleep;
exports.waitFor = waitFor;
exports.serialize = serialize;
exports.uuidFrom = uuidFrom;
exports.nextUUID = nextUUID;
const fs_1 = __importDefault(require("fs"));
const uuid_1345_1 = __importDefault(require("uuid-1345"));
function getFiles(dir) {
    let results = [];
    const list = fs_1.default.readdirSync(dir);
    list.forEach((file) => {
        file = dir + '/' + file;
        const stat = fs_1.default.statSync(file);
        if (stat && stat.isDirectory()) {
            results = results.concat(getFiles(file));
        }
        else {
            results.push(file);
        }
    });
    return results;
}
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
async function waitFor(cb, withTimeout, onTimeout) {
    let t;
    const ret = await Promise.race([
        new Promise((resolve, reject) => cb(resolve, reject)),
        new Promise(resolve => { t = setTimeout(() => resolve('timeout'), withTimeout); }),
    ]);
    clearTimeout(t);
    if (ret === 'timeout')
        await onTimeout();
    return ret;
}
function serialize(obj = {}, fmt) {
    return JSON.stringify(obj, (k, v) => typeof v === 'bigint' ? v.toString() : v, fmt);
}
function uuidFrom(string) {
    return uuid_1345_1.default.v3({ namespace: '6ba7b811-9dad-11d1-80b4-00c04fd430c8', name: string });
}
function nextUUID() {
    return uuidFrom(Date.now().toString());
}
exports.isDebug = process.env.DEBUG?.includes('bedrock-portal');
