"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
exports.createProtocol = createProtocol;
exports.getProtocol = getProtocol;
exports.createSerializer = createSerializer;
exports.createDeserializer = createDeserializer;
const { ProtoDefCompiler, CompiledProtodef } = require('protodef').Compiler;
const protodef_1 = require("protodef");
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const protocol_1 = __importDefault(require("../protocol"));
class Parser extends protodef_1.FullPacketParser {
    dumpFailedBuffer(packet, prefix = '') {
        if (packet.length > 1000) {
            const now = Date.now();
            fs_1.default.writeFileSync(now + '_packetReadError.txt', packet.toString('hex'));
            console.log(prefix, `Deserialization failure for packet 0x${packet.slice(0, 1).toString('hex')}. Packet buffer saved in ./${now}_packetReadError.txt as buffer was too large (${packet.length} bytes).`);
        }
        else {
            console.log(prefix, 'Read failure for 0x' + packet.slice(0, 1).toString('hex'), packet.slice(0, 1000));
        }
    }
    verify(deserialized, serializer) {
        const { name, params } = deserialized.data;
        const oldBuffer = deserialized.fullBuffer;
        const newBuffer = serializer.createPacketBuffer({ name, params });
        if (!newBuffer.equals(oldBuffer)) {
            const fs = require('fs');
            fs.writeFileSync('new.bin', newBuffer);
            fs.writeFileSync('old.bin', oldBuffer);
            fs.writeFileSync('failed.json', JSON.stringify(params, (k, v) => typeof v === 'bigint' ? v.toString() : v, 2));
            console.warn('Failed to re-encode', name);
        }
    }
}
exports.Parser = Parser;
// Compiles the ProtoDef schema at runtime
function createProtocol(version) {
    try {
        require(`../../data/${version}/size.js`);
        return getProtocol(version);
    }
    // eslint-disable-next-line no-empty
    catch { }
    const compiler = new ProtoDefCompiler();
    compiler.addTypesToCompile(protocol_1.default.types);
    compiler.addTypes(require('../datatypes/compiler-minecraft'));
    const compiledProto = compiler.compileProtoDefSync();
    return compiledProto;
}
// Loads already generated read/write/sizeof code
function getProtocol(version) {
    const compiler = new ProtoDefCompiler();
    compiler.addTypes(require((0, path_1.join)(__dirname, '../datatypes/compiler-minecraft')));
    global.PartialReadError = require('protodef/src/utils').PartialReadError;
    const compile = (compiler, file) => require(file)(compiler.native);
    return new CompiledProtodef(compile(compiler.sizeOfCompiler, (0, path_1.join)(__dirname, `../../data/${version}/size.js`)), compile(compiler.writeCompiler, (0, path_1.join)(__dirname, `../../data/${version}/write.js`)), compile(compiler.readCompiler, (0, path_1.join)(__dirname, `../../data/${version}/read.js`)));
}
function createSerializer(version) {
    const proto = createProtocol(version);
    return new protodef_1.Serializer(proto, 'mcpe_packet');
}
function createDeserializer(version) {
    const proto = createProtocol(version);
    return new Parser(proto, 'mcpe_packet');
}
