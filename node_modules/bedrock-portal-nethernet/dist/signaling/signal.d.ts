import type { Authflow } from 'prismarine-auth';
import { Data, ErrorEvent, WebSocket } from 'ws';
import { SignalStructure } from './struct';
import { EventEmitter } from 'events';
export declare function getRandomUint64(): bigint;
export declare class Signal extends EventEmitter {
    authflow: Authflow;
    ws: WebSocket | null;
    pingInterval: NodeJS.Timeout | null;
    networkId: bigint;
    version: string;
    credentials: any;
    constructor(authflow: Authflow, networkId: bigint, version: string);
    connect(): Promise<void>;
    destroy(resume?: boolean): Promise<void>;
    init(): Promise<void>;
    onOpen(): void;
    onError(err: ErrorEvent): void;
    onClose(code: number, reason: string): void;
    onMessage(res: Data): void;
    write(signal: SignalStructure): void;
}
