"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rest = void 0;
const axios_1 = __importDefault(require("axios"));
class Rest {
    constructor(client) {
        this.client = client;
    }
    post(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, config = {}) {
            return this.request('POST', Object.assign({ url }, config));
        });
    }
    put(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, config = {}) {
            return this.request('PUT', Object.assign({ url }, config));
        });
    }
    get(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, config = {}) {
            return this.request('GET', Object.assign({ url }, config));
        });
    }
    delete(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, config = {}) {
            return this.request('DELETE', Object.assign({ url }, config));
        });
    }
    getAuthKey(xuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.get(`https://chat.xboxlive.com/users/xuid(${xuid})/chat/auth`);
            return res.AuthKey;
        });
    }
    getXuid(gamertag) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.get(`https://profile.xboxlive.com/users/gt(${gamertag})/profile/settings`)
                .then(e => e.profileUsers[0].id);
            return response;
        });
    }
    getProfile(xuid) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.get(`https://peoplehub.xboxlive.com/users/me/people/xuids(${xuid})/decoration/detail,preferredColor,presenceDetail,avatar`)
                .then(e => e.people[0]);
            return response;
        });
    }
    getProfiles(xuids) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.post('https://peoplehub.xboxlive.com/users/me/people/batch/decoration/detail,preferredColor,presenceDetail,avatar', { data: { xuids } });
            return response.people;
        });
    }
    getConversations() {
        return __awaiter(this, arguments, void 0, function* (inbox = 'primary') {
            return this.get(`https://xblmessaging.xboxlive.com/network/xbox/users/me/inbox/${inbox}`);
        });
    }
    getConversation(conversationType, conversationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`https://xblmessaging.xboxlive.com/network/xbox/users/me/conversations/${conversationType}/${conversationId}?maxItems=10000`);
        });
    }
    getGroups() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get('https://xblmessaging.xboxlive.com/network/xbox/users/me/groups', { contractVersion: '1' });
        });
    }
    getGroup(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`https://xblmessaging.xboxlive.com/network/xbox/users/me/groups/${id}/summary`, { contractVersion: '1' });
        });
    }
    getUploadUrl(fileType) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`https://xblmessaging.xboxlive.com/network/xbox/users/me/upload/${fileType}`);
        });
    }
    transcribeVoiceMessage(attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.get(`https://attachments.xboxlive.com/attachments/${attachmentId}/transcribe`);
        });
    }
    sendMessageToPlayer(xuid, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(`https://xblmessaging.xboxlive.com/network/xbox/users/me/conversations/users/xuid(${xuid})`, {
                data: body,
                contractVersion: '1',
            });
        });
    }
    sendMessageToGroup(groupId, channelId, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.post(`https://xblmessaging.xboxlive.com/network/xbox/users/me/groups/${groupId}/channels/${channelId}/messages`, {
                data: body,
            });
        });
    }
    markMessageAsRead(messageId, conversationId, conversationType) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.put('https://xblmessaging.xboxlive.com/network/xbox/users/me/conversations/horizon', {
                data: {
                    conversations: [
                        {
                            horizonType: 'Read',
                            horizon: messageId,
                            conversationId,
                            conversationType,
                        },
                    ],
                },
            });
        });
    }
    request(method, config) {
        return __awaiter(this, void 0, void 0, function* () {
            const relyingParty = config.relyingParty || 'http://xboxlive.com';
            const auth = yield this.client.authflow.getXboxToken(relyingParty);
            const payload = {
                method,
                url: config.url,
                headers: Object.assign({ 'authorization': `XBL3.0 x=${auth.userHash};${auth.XSTSToken}`, 'x-xbl-contract-version': config.contractVersion || '2', 'accept-language': 'en-US', 'x-xbl-clientseqnum': `${this.client.ws.sequenceId}` }, config.headers),
                data: undefined,
                params: undefined,
            };
            if (config.params)
                payload.params = config.params;
            if (config.data)
                payload.data = config.data;
            return (0, axios_1.default)(payload).then(e => e.data);
        });
    }
}
exports.Rest = Rest;
