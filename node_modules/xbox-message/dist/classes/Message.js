"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const __1 = require("..");
const TextPart_1 = require("./Parts/TextPart");
const VoicePart_1 = require("./Parts/VoicePart");
const ImagePart_1 = require("./Parts/ImagePart");
const UnknownPart_1 = require("./Parts/UnknownPart");
const WeblinkPart_1 = require("./Parts/WeblinkPart");
const FeedItemPart_1 = require("./Parts/FeedItemPart");
const DirectMentionPart_1 = require("./Parts/DirectMentionPart");
const WeblinkMediaPart_1 = require("./Parts/WeblinkMediaPart");
class Message {
    constructor(client, data) {
        this.client = client;
        this.id = data.messageId;
        this.conversationId = data.conversationId;
        this.userId = data.sender;
        this.user = this.client.users.add({ id: this.userId }, true);
        this._patch(data);
    }
    get conversation() {
        return this.client.conversations.cache.get(this.conversationId);
    }
    _clone() {
        return Object.assign(Object.create(this), this);
    }
    _patch(data) {
        if ('timestamp' in data) {
            this.timestampCreated = data.timestamp;
        }
        if ('lastUpdateTimestamp' in data) {
            this.timestampUpdated = data.lastUpdateTimestamp;
        }
        if ('isDeleted' in data) {
            this.isDeleted = data.isDeleted;
        }
        if ('contentPayload' in data) {
            this.parts = data.contentPayload.content.parts.map(part => {
                switch (part.contentType) {
                    case __1.PartContentType.Text:
                        return new TextPart_1.TextPart(this.client, part);
                    case __1.PartContentType.Voice:
                        return new VoicePart_1.VoicePart(this.client, part);
                    case __1.PartContentType.Image:
                        return new ImagePart_1.ImagePart(this.client, part);
                    case __1.PartContentType.Weblink:
                        return new WeblinkPart_1.WeblinkPart(this.client, part);
                    case __1.PartContentType.WeblinkMedia:
                        return new WeblinkMediaPart_1.WeblinkMediaPart(this.client, part);
                    case __1.PartContentType.FeedItem:
                        return new FeedItemPart_1.FeedItemPart(this.client, part);
                    case __1.PartContentType.DirectMention:
                        return new DirectMentionPart_1.DirectMentionPart(this.client, part);
                    default:
                        return new UnknownPart_1.UnknownPart(this.client, part);
                }
            });
            this.content = this.parts
                .filter(part => part.isText() || part.isWeblink() || part.isWeblinkMedia() || part.isDirectMention())
                .map(part => part.isText() ? part.text : part.isWeblink() ? part.text : part.isWeblinkMedia() ? part.url : part.isDirectMention() ? part.text : '')
                .join('');
            this.feedItems = this.parts
                .filter((part) => part.isFeedItem());
            this.voice = this.parts
                .filter((part) => part.isVoice())
                .shift();
            this.attachment = this.parts
                .filter((part) => part.isImage())
                .shift();
        }
    }
    static fromWebsocket(client, data) {
        return new Message(client, data.payload);
    }
}
exports.Message = Message;
