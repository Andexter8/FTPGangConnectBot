"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XboxMessageError = exports.XboxMessageErrorMessages = exports.XboxMessageErrorCodes = void 0;
var XboxMessageErrorCodes;
(function (XboxMessageErrorCodes) {
    XboxMessageErrorCodes["Debug"] = "Debug";
    XboxMessageErrorCodes["InvalidConversationType"] = "InvalidConversationType";
    XboxMessageErrorCodes["MissingMessageParts"] = "MissingMessageParts";
    XboxMessageErrorCodes["MessageRecipientNotFound"] = "MessageRecipientNotFound";
    XboxMessageErrorCodes["MessageGroupNotFound"] = "MessageGroupNotFound";
    XboxMessageErrorCodes["MessageNotFound"] = "MessageNotFound";
    XboxMessageErrorCodes["ConversationNotFound"] = "ConversationNotFound";
    XboxMessageErrorCodes["WebsocketAlreadyConnected"] = "WebsocketAlreadyConnected";
})(XboxMessageErrorCodes || (exports.XboxMessageErrorCodes = XboxMessageErrorCodes = {}));
exports.XboxMessageErrorMessages = {
    [XboxMessageErrorCodes.Debug]: 'Debug',
    [XboxMessageErrorCodes.InvalidConversationType]: (type) => `Invalid conversation type: ${type}`,
    [XboxMessageErrorCodes.MissingMessageParts]: 'Message must have at least one part',
    [XboxMessageErrorCodes.MessageRecipientNotFound]: 'Message recipient not found',
    [XboxMessageErrorCodes.MessageGroupNotFound]: 'Message group not found',
    [XboxMessageErrorCodes.MessageNotFound]: 'Message not found',
    [XboxMessageErrorCodes.ConversationNotFound]: 'Conversation not found',
    [XboxMessageErrorCodes.WebsocketAlreadyConnected]: 'Websocket already connected',
};
class XboxMessageError extends Error {
    constructor(code, ...args) {
        var _a;
        super(XboxMessageError.getMessage(code, args));
        this.code = code;
        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, XboxMessageError);
    }
    get name() {
        return `${super.name} [${this.code}]`;
    }
    static getMessage(code, args) {
        if (!(code in XboxMessageErrorCodes))
            throw new Error('Error code must be a valid XboxMessageErrorCodes');
        const msg = exports.XboxMessageErrorMessages[code];
        if (!msg)
            throw new Error(`No message associated with error code: ${code}.`);
        if (typeof msg === 'function')
            return msg(...args);
        if (!(args === null || args === void 0 ? void 0 : args.length))
            return msg;
        args.unshift(msg);
        return String(...args);
    }
}
exports.XboxMessageError = XboxMessageError;
