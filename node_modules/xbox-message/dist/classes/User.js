"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const MessageEntity_1 = require("./MessageEntity");
const OneToOneConversation_1 = require("./Conversation/OneToOneConversation");
class User extends MessageEntity_1.MessageEntity {
    constructor(client, data) {
        super(client);
        this.client = client;
        this.id = data.id;
        this._patch(data);
    }
    get conversation() {
        return this.client.conversations.cache.find(g => g instanceof OneToOneConversation_1.OneToOneConversation && g.recipientId === this.id);
    }
    fetch() {
        return __awaiter(this, arguments, void 0, function* (force = true) {
            return this.client.users.fetch(this.id, { force });
        });
    }
    _clone() {
        return Object.assign(Object.create(this), this);
    }
    _patch(data) {
        if ('gamertag' in data) {
            this.gamertag = data.gamertag;
        }
        if ('displayImageURL' in data) {
            this.displayImageURL = data.displayImageURL;
        }
        if ('colour' in data) {
            this.colour = data.colour;
        }
    }
}
exports.User = User;
