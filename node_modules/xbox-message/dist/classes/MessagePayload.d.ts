import { XboxMessage } from '..';
import { APIImagePart } from './Parts/ImagePart';
import { APITextPart } from './Parts/TextPart';
export interface MessagePayloadOptions {
    content?: string;
    attachment?: {
        data: Buffer;
        fileType: 'png' | 'jpg' | 'wav' | 'silk' | 'gif' | 'aac';
    };
}
export interface APIMessageBody {
    parts: Array<APITextPart | APIImagePart>;
}
export declare class MessagePayload {
    client: XboxMessage;
    options: MessagePayloadOptions;
    body: APIMessageBody | null;
    constructor(client: XboxMessage, options: MessagePayloadOptions);
    parseContent(input: string): {
        parts: {
            contentType: string;
            version: number;
            text: string;
        }[];
    };
    resolveParts(): Promise<this>;
    resolveFile(resource: {
        data: Buffer;
        fileType: 'png' | 'jpg' | 'wav' | 'silk' | 'gif' | 'aac';
    }): Promise<{
        contentType: string;
        version: number;
        attachmentId: string;
        filetype: "png" | "jpg" | "wav" | "silk" | "gif" | "aac";
        sizeInBytes: number;
        hash: any;
        height: number;
        width: number;
    }>;
    static create(target: XboxMessage, options: string | MessagePayloadOptions): MessagePayload;
}
