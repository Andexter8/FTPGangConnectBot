"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupManager = void 0;
const collection_1 = require("@discordjs/collection");
const Group_1 = require("../Group");
class GroupManager {
    constructor(client) {
        this.cache = new collection_1.Collection();
        this.client = client;
    }
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const existing = this.cache.get(id);
            if (existing)
                return existing;
            const data = yield this.client.rest.getGroup(id);
            return this.add(data.group, true);
        });
    }
    add(data, cache = true, { id } = {}) {
        const existing = this.cache.get(id !== null && id !== void 0 ? id : data.groupId);
        if (existing) {
            return existing;
        }
        const entry = new Group_1.Group(this.client, data);
        if (cache)
            this.cache.set(id !== null && id !== void 0 ? id : entry.id, entry);
        return entry;
    }
}
exports.GroupManager = GroupManager;
