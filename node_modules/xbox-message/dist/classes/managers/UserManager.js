"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManager = void 0;
const collection_1 = require("@discordjs/collection");
const User_1 = require("../User");
class UserManager {
    constructor(client) {
        this.cache = new collection_1.Collection();
        this.client = client;
    }
    fetch(id_1) {
        return __awaiter(this, arguments, void 0, function* (id, { cache = true, force = false } = {}) {
            if (!force) {
                const existing = this.cache.get(id);
                if (existing)
                    return existing;
            }
            const data = yield this.client.rest.getProfile(id);
            const mapped = {
                id: data.xuid,
                gamertag: data.gamertag,
                displayImageURL: data.displayPicRaw,
                colour: {
                    primary: data.preferredColor.primaryColor,
                    secondary: data.preferredColor.secondaryColor,
                    tertiary: data.preferredColor.tertiaryColor,
                },
            };
            return this.add(mapped, cache);
        });
    }
    fetchMany(ids_1) {
        return __awaiter(this, arguments, void 0, function* (ids, { cache = true } = {}) {
            const data = yield this.client.rest.getProfiles(ids);
            const mapRes = (data) => ({
                id: data.xuid,
                gamertag: data.gamertag,
                displayImageURL: data.displayPicRaw,
                colour: {
                    primary: data.preferredColor.primaryColor,
                    secondary: data.preferredColor.secondaryColor,
                    tertiary: data.preferredColor.tertiaryColor,
                },
            });
            return data.map(d => this.add(mapRes(d), cache));
        });
    }
    add(data, cache = true, { id } = {}) {
        const existing = this.cache.get(id !== null && id !== void 0 ? id : data.id);
        if (existing) {
            if (cache) {
                existing._patch(data);
                return existing;
            }
            const clone = existing._clone();
            clone._patch(data);
            return clone;
        }
        const entry = new User_1.User(this.client, data);
        if (cache)
            this.cache.set(id !== null && id !== void 0 ? id : entry.id, entry);
        return entry;
    }
}
exports.UserManager = UserManager;
