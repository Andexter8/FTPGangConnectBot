"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageManager = void 0;
const collection_1 = require("@discordjs/collection");
const __1 = require("../..");
const Message_1 = require("../Message");
class MessageManager {
    constructor(conversation) {
        this.cache = new collection_1.Collection();
        this.client = conversation.client;
        this.conversation = conversation;
    }
    fetch(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id)
                return this.fetchSingle(id);
            return this.fetchMany();
        });
    }
    fetchMany() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.getConversation(this.conversation.type, this.conversation.id);
            return data.messages.reduce((_data, message) => _data.set(message.messageId, this.add(message, true)), new collection_1.Collection());
        });
    }
    fetchSingle(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const existing = this.cache.get(id);
            if (existing)
                return existing;
            const message = (yield this.fetchMany()).get(id);
            if (!message) {
                throw new __1.XboxMessageError(__1.XboxMessageErrorCodes.MessageNotFound);
            }
            return message;
        });
    }
    add(data, cache = true, { id } = {}) {
        const existing = this.cache.get(id !== null && id !== void 0 ? id : data.messageId);
        if (existing) {
            if (cache) {
                existing._patch(data);
                return existing;
            }
            const clone = existing._clone();
            clone._patch(data);
            return clone;
        }
        const entry = new Message_1.Message(this.client, data);
        if (cache)
            this.cache.set(id !== null && id !== void 0 ? id : entry.id, entry);
        return entry;
    }
}
exports.MessageManager = MessageManager;
