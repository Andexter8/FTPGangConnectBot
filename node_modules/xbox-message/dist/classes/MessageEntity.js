"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEntity = void 0;
const __1 = require("..");
const User_1 = require("./User");
const MessagePayload_1 = require("./MessagePayload");
const XboxMessageError_1 = require("./errors/XboxMessageError");
class MessageEntity {
    constructor(client) {
        this.client = client;
    }
    send(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { GroupConversation } = yield Promise.resolve().then(() => __importStar(require('./Conversation/GroupConversation')));
            const { OneToOneConversation } = yield Promise.resolve().then(() => __importStar(require('./Conversation/OneToOneConversation')));
            let messagePayload;
            if (options instanceof MessagePayload_1.MessagePayload) {
                messagePayload = yield options.resolveParts();
            }
            else {
                messagePayload = yield MessagePayload_1.MessagePayload.create(this.client, options).resolveParts();
            }
            if (!messagePayload.body) {
                throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.MissingMessageParts);
            }
            let res = null;
            if (this instanceof GroupConversation) {
                if (!this.group)
                    throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.MessageGroupNotFound);
                res = yield this.client.rest.sendMessageToGroup(this.group.id, '0', messagePayload.body);
            }
            else if (this instanceof OneToOneConversation || this instanceof User_1.User) {
                const id = this instanceof OneToOneConversation
                    ? this.recipientId
                    : this.id;
                if (!id)
                    throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.MessageRecipientNotFound);
                res = yield this.client.rest.sendMessageToPlayer(id, messagePayload.body);
            }
            if (!(res === null || res === void 0 ? void 0 : res.messageId)) {
                throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.MessageNotFound);
            }
            const conversationType = this instanceof OneToOneConversation || this instanceof GroupConversation
                ? this.type
                : this instanceof User_1.User
                    ? __1.ConversationType.OneToOne
                    : __1.ConversationType.Group;
            yield this.client.rest.markMessageAsRead(res.messageId, res.conversationId, conversationType);
            const conversation = yield this.client.conversations.fetch(res.conversationId, conversationType);
            if (!conversation) {
                throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.ConversationNotFound);
            }
            const message = yield conversation.messages.fetch(res.messageId);
            return message;
        });
    }
}
exports.MessageEntity = MessageEntity;
