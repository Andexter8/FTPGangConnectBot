"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XboxMessage = exports.PartContentType = exports.MessageType = exports.ConversationType = exports.PayloadType = exports.ChannelType = void 0;
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const prismarine_auth_1 = require("prismarine-auth");
var ChannelType;
(function (ChannelType) {
    ChannelType["System"] = "System";
    ChannelType["GroupMessage"] = "GroupMessage";
    ChannelType["XboxMessage"] = "XboxMessage";
})(ChannelType || (exports.ChannelType = ChannelType = {}));
var PayloadType;
(function (PayloadType) {
    PayloadType["ContentMessage"] = "ContentMessage";
    PayloadType["SetHorizon"] = "SetHorizon";
    PayloadType["JoinChatChannel"] = "JoinChatChannel";
})(PayloadType || (exports.PayloadType = PayloadType = {}));
var ConversationType;
(function (ConversationType) {
    ConversationType["Group"] = "Group";
    ConversationType["OneToOne"] = "OneToOne";
})(ConversationType || (exports.ConversationType = ConversationType = {}));
var MessageType;
(function (MessageType) {
    MessageType["WhoAmI"] = "WhoAmI";
    MessageType["JoinChannel"] = "JoinChannel";
    MessageType["LeaveChannel"] = "LeaveChannel";
    MessageType["UserInfo"] = "UserInfo";
    MessageType["BasicText"] = "BasicText";
    MessageType["Horizons"] = "Horizons";
    MessageType["XboxMessage"] = "XboxMessage";
    MessageType["NoOp"] = "NoOp";
})(MessageType || (exports.MessageType = MessageType = {}));
var PartContentType;
(function (PartContentType) {
    PartContentType["Text"] = "text";
    PartContentType["Weblink"] = "weblink";
    PartContentType["Image"] = "image";
    PartContentType["FeedItem"] = "feedItem";
    PartContentType["WeblinkMedia"] = "weblinkMedia";
    PartContentType["Voice"] = "voice";
    PartContentType["DirectMention"] = "directMention";
})(PartContentType || (exports.PartContentType = PartContentType = {}));
const rest_1 = require("./rest");
const ws_1 = require("./ws");
const UserManager_1 = require("./classes/managers/UserManager");
const ConversationManager_1 = require("./classes/managers/ConversationManager");
const GroupManager_1 = require("./classes/managers/GroupManager");
class XboxMessage extends tiny_typed_emitter_1.TypedEmitter {
    constructor(options) {
        var _a;
        super();
        this.user = null;
        this.authflow = (_a = options === null || options === void 0 ? void 0 : options.authflow) !== null && _a !== void 0 ? _a : new prismarine_auth_1.Authflow(options === null || options === void 0 ? void 0 : options.cacheIdentifier, options === null || options === void 0 ? void 0 : options.cachePath, { flow: 'sisu', authTitle: prismarine_auth_1.Titles.XboxAppIOS, deviceType: 'iOS' });
        this.rest = new rest_1.Rest(this);
        this.users = new UserManager_1.UserManager(this);
        this.conversations = new ConversationManager_1.ConversationManager(this);
        this.groups = new GroupManager_1.GroupManager(this);
        this.ws = new ws_1.WebsocketManager(this);
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            const xbl = yield this.authflow.getXboxToken();
            this.user = yield this.users.fetch(xbl.userXUID);
            const [groups, conversations] = yield Promise.all([
                this.rest.getGroups(),
                this.rest.getConversations(),
            ]);
            for (const group of groups.groups) {
                this.groups.add(group);
            }
            for (const conversation of conversations.conversations) {
                this.conversations.add(conversation);
            }
            const userIds = Array.from(new Set(conversations.conversations.flatMap(c => c.participants)));
            if (userIds.length > 0) {
                yield this.users.fetchMany(userIds);
            }
            yield this.ws.connect();
        });
    }
    destroy() {
        return __awaiter(this, arguments, void 0, function* (resume = false) {
            yield this.ws.destroy(resume);
        });
    }
}
exports.XboxMessage = XboxMessage;
__exportStar(require("./ws"), exports);
__exportStar(require("./rest"), exports);
__exportStar(require("./classes/errors/XboxMessageError"), exports);
__exportStar(require("./classes/managers/UserManager"), exports);
__exportStar(require("./classes/managers/ConversationManager"), exports);
__exportStar(require("./classes/managers/GroupManager"), exports);
__exportStar(require("./classes/managers/MessageManager"), exports);
__exportStar(require("./classes/MessagePayload"), exports);
__exportStar(require("./classes/MessageEntity"), exports);
__exportStar(require("./classes/Message"), exports);
__exportStar(require("./classes/User"), exports);
__exportStar(require("./classes/Group"), exports);
__exportStar(require("./classes/Conversation/BaseConversation"), exports);
__exportStar(require("./classes/Conversation/GroupConversation"), exports);
__exportStar(require("./classes/Conversation/OneToOneConversation"), exports);
__exportStar(require("./classes/Parts/BasePart"), exports);
__exportStar(require("./classes/Parts/DirectMentionPart"), exports);
__exportStar(require("./classes/Parts/FeedItemPart"), exports);
__exportStar(require("./classes/Parts/ImagePart"), exports);
__exportStar(require("./classes/Parts/TextPart"), exports);
__exportStar(require("./classes/Parts/UnknownPart"), exports);
__exportStar(require("./classes/Parts/VoicePart"), exports);
__exportStar(require("./classes/Parts/WeblinkMediaPart"), exports);
__exportStar(require("./classes/Parts/WeblinkPart"), exports);
