"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsocketManager = void 0;
const debug_1 = __importDefault(require("debug"));
const ws_1 = require("ws");
const _1 = require(".");
const handlers_1 = __importDefault(require("./handlers"));
const XboxMessageError_1 = require("./classes/errors/XboxMessageError");
const debug = (0, debug_1.default)('xbox-message');
class WebsocketManager {
    constructor(client) {
        this.ws = null;
        this.heartbeatTimeout = null;
        this.reconnectTimeout = null;
        this._sequenceId = 0;
        this.client = client;
    }
    get sequenceId() {
        return this._sequenceId++;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (((_a = this.ws) === null || _a === void 0 ? void 0 : _a.readyState) === ws_1.WebSocket.OPEN)
                throw new XboxMessageError_1.XboxMessageError(XboxMessageError_1.XboxMessageErrorCodes.WebsocketAlreadyConnected);
            const xbl = yield this.client.authflow.getXboxToken();
            const authKey = yield this.client.rest.getAuthKey(xbl.userXUID);
            const address = `wss://chat.xboxlive.com/users/xuid(${xbl.userXUID})/chat/connect?AuthKey=${authKey}`;
            debug(`Connecting to ${address}?AuthKey=${authKey}`);
            const ws = new ws_1.WebSocket(address, 'chat');
            ws.onopen = () => {
                this.onOpen();
            };
            ws.onclose = (event) => {
                this.onClose(event.code, event.reason);
            };
            ws.onerror = (event) => {
                this.onError(event.error);
            };
            ws.onmessage = (event) => {
                this.onMessage(event.data);
            };
            this.ws = ws;
        });
    }
    destroy() {
        return __awaiter(this, arguments, void 0, function* (resume = false) {
            debug('Disconnecting from chat.xboxlive.com');
            if (this.heartbeatTimeout) {
                clearTimeout(this.heartbeatTimeout);
                this.heartbeatTimeout = null;
            }
            if (this.reconnectTimeout) {
                clearTimeout(this.reconnectTimeout);
                this.reconnectTimeout = null;
            }
            if (this.ws) {
                this.ws.onmessage = null;
                this.ws.onclose = null;
                const shouldClose = this.ws.readyState === ws_1.WebSocket.OPEN;
                if (shouldClose) {
                    let outerResolve;
                    const promise = new Promise((resolve) => {
                        outerResolve = resolve;
                    });
                    this.ws.onclose = outerResolve;
                    this.ws.close(1000, 'Normal Closure');
                    yield promise;
                }
                this.ws.onerror = null;
            }
            if (resume) {
                return this.connect();
            }
        });
    }
    send(payload) {
        const data = JSON.stringify(payload);
        debug('Sending', data);
        if (this.ws) {
            this.ws.send(data);
        }
    }
    onOpen() {
        debug('Client Connected to chat.xboxlive.com');
        this.reconnectTimeout = setTimeout(() => {
            debug('Reconnecting to chat.xboxlive.com');
            this.destroy(true);
        }, 90 * 60 * 1000);
        this.send({ messageType: _1.MessageType.WhoAmI, channel: { type: _1.ChannelType.System }, clientSeqNum: this.sequenceId });
    }
    onError(err) {
        debug('Websocket Error', err);
    }
    onClose(code, reason) {
        debug(`Websocket Disconnected from chat.xboxlive.com with code ${code} and reason ${reason}`);
        if (code === 1006) {
            debug('Websocket Connection Closed Unexpectedly');
            if (this.reconnectTimeout) {
                clearTimeout(this.reconnectTimeout);
            }
            this.destroy(true);
        }
    }
    onMessage(res) {
        if (!(typeof res === 'string')) {
            debug('received non-string message', res);
            return;
        }
        const event = JSON.parse(res);
        debug('received message', res);
        this.client.emit('event', event);
        if (event.messageType && handlers_1.default[event.messageType]) {
            handlers_1.default[event.messageType](this.client, event);
        }
    }
}
exports.WebsocketManager = WebsocketManager;
