"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const Message_1 = require("../classes/Message");
exports.default = (client, event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (event.payload.type === __1.PayloadType.ContentMessage) {
        const message = Message_1.Message.fromWebsocket(client, event);
        if (message.isDeleted) {
            client.emit('messageDelete', message);
            return;
        }
        if (!message.conversation) {
            yield client.conversations.fetch(event.payload.conversationId, event.payload.conversationType);
        }
        (_a = message.conversation) === null || _a === void 0 ? void 0 : _a.messages.cache.set(message.id, message);
        client.emit('message', message);
    }
    else if (event.payload.type === __1.PayloadType.JoinChatChannel) {
        const e = event;
        client.emit('channelJoin', e);
    }
});
